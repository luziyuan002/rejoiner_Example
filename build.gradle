apply plugin: 'java'
apply plugin: 'com.google.protobuf'
//apply plugin: 'org.springframework.boot'
//apply plugin: 'io.spring.dependency-management'

//生成pom依赖
group = 'com.101tec'
version = '0.7-dev'
sourceCompatibility = 1.8
//新
ext {
    spring_version = "4.3.14.RELEASE"
    springBootVersion = '2.1.2.RELEASE'
}
buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    // ASSUMES GRADLE 2.12 OR HIGHER. Use plugin version 0.7.5 with earlier
    // gradle versions
    classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.1'
    classpath("org.springframework.boot:spring-boot-gradle-plugin:2.1.2.RELEASE")
  }
}

repositories {
  mavenCentral()
  mavenLocal()
  maven {
    url 'https://oss.sonatype.org/content/repositories/snapshots/'
  }
}
//新
configurations {
    mybatisGenerator
    providedRuntime
}
def flavor = project.hasProperty('flavor') ? flavor : "common"
// IMPORTANT: You probably want the non-SNAPSHOT version of gRPC. Make sure you
// are looking at a tagged version of the example and not "master"!

// Feel free to delete the comment at the next line. It is just for safely
// updating the version in our release process.
def grpcVersion = '1.7.0' // CURRENT_GRPC_VERSION

dependencies {
  compile 'com.google.guava:guava:24.1-jre'
  compile "com.google.api.grpc:proto-google-common-protos:0.1.9"
  compile "io.grpc:grpc-netty:${grpcVersion}"
  compile "io.grpc:grpc-protobuf:${grpcVersion}"
  compile "io.grpc:grpc-stub:${grpcVersion}"
  compile "com.google.api.graphql:rejoiner:0.1.0"
  compile group: 'org.eclipse.jetty', name: 'jetty-server', version: '9.3.8.v20160314'
  compile group: 'org.slf4j', name: 'slf4j-simple', version: '1.6.2'
  compile 'com.google.inject.extensions:guice-servlet:4.2.0'
  compile group: 'org.eclipse.jetty', name: 'jetty-servlet', version: '9.3.8.v20160314'
  compile 'net.javacrumbs.future-converter:future-converter-java8-guava:1.1.0'
  compile ("mysql:mysql-connector-java:5.1.24")
    //新
  compile "org.springframework:spring-web:$spring_version"
  compile "org.springframework:spring-webmvc:$spring_version"
  compile "org.springframework:spring-aop:$spring_version"
  compile "org.springframework:spring-aspects:$spring_version"
  compile "org.springframework:spring-beans:$spring_version"
  compile "org.springframework:spring-context:$spring_version"
  compile "org.springframework:spring-context-support:$spring_version"
  compile "org.springframework:spring-core:$spring_version"
  compile "org.springframework:spring-expression:$spring_version"
  compile "org.springframework:spring-jdbc:$spring_version"
  compile "org.springframework:spring-messaging:$spring_version"
  compile "org.springframework:spring-orm:$spring_version"
  compile "org.springframework:spring-tx:$spring_version"
  compile "org.springframework:spring-test:$spring_version"
  compile "org.mybatis:mybatis:3.4.1"
//mybatis spring 插件
  compile "org.mybatis:mybatis-spring:1.3.1"// https://mvnrepository.com/artifact/javax.servlet/jstl
  compile group: 'javax.servlet', name: 'jstl', version: '1.2'
// https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api
  compile group: 'javax.servlet', name: 'javax.servlet-api', version: '3.1.0'
// https://mvnrepository.com/artifact/javax/javaee-api
  compile group: 'javax', name: 'javaee-api', version: '7.0'
// https://mvnrepository.com/artifact/mysql/mysql-connector-java
  compile group: 'mysql', name: 'mysql-connector-java', version: '5.1.21'


//公共资源包
  compile "commons-logging:commons-logging:1.2"
  compile "commons-lang:commons-lang:2.6"
  compile "org.apache.commons:commons-collections4:4.0"
  compile "commons-beanutils:commons-beanutils:1.8.3"
  compile "commons-dbcp:commons-dbcp:1.4"
  compile "commons-pool:commons-pool:1.6"

  compile group: 'log4j', name: 'log4j', version: '1.2.17'

    //2、添加依赖
  mybatisGenerator 'org.mybatis.generator:mybatis-generator-core:1.3.2'
  mybatisGenerator 'mysql:mysql-connector-java:5.1.21'
  mybatisGenerator 'tk.mybatis:mapper:3.3.1'
    //配置springboot依赖
//  compile  'org.springframework.boot:spring-boot-starter'
//  compile 'org.springframework.boot:spring-boot-starter-web'
//  compile  'org.springframework.boot:spring-boot-starter-test'
    
    
    
   
}
def getDbProperties = {
    def properties = new Properties()
    file("src/main/resources/mybatis/db-mysql.properties").withInputStream { inputStream ->
        properties.load(inputStream)
    }
    properties;
}

protobuf {
  protoc {
    artifact = 'com.google.protobuf:protoc:3.4.0'
  }
  plugins {
    grpc {
      artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
    }
  }
  generateProtoTasks {
    all()*.plugins {
      grpc {
        // To generate deprecated interfaces and static bindService method,
        // turn the enable_deprecated option to true below:
        option 'enable_deprecated=false'
      }
    }
  }
}

// Inform IntelliJ projects about the generated code.
apply plugin: 'idea'

idea {
  module {
    // Not using generatedSourceDirs because of
    // https://discuss.gradle.org/t/support-for-intellij-2016/15294/8
    sourceDirs += file("${projectDir}/build/generated/source/proto/main/java");
    sourceDirs += file("${projectDir}/build/generated/source/proto/main/grpc");
  }
}

// Provide convenience executables for trying out the examples.
apply plugin: 'application'

startScripts.enabled = false

// ------------------
// Helloworld Example

task helloworldGraphqlServer(type: CreateStartScripts) {
  mainClassName = 'com.google.api.graphql.examples.helloworld.graphqlserver.GraphQlServer'
  applicationName = 'helloworld-graphqlserver'
  outputDir = new File(project.buildDir, 'tmp')
  classpath = jar.outputs.files + project.configurations.runtime
}

task helloworldBackend(type: CreateStartScripts) {
  mainClassName = 'com.google.api.graphql.examples.helloworld.backend.HelloWorldServer'
  applicationName = 'helloworld-backend'
  outputDir = new File(project.buildDir, 'tmp')
  classpath = jar.outputs.files + project.configurations.runtime
}

// ------------------
// Library Example

task libraryGraphqlServer(type: CreateStartScripts) {
  mainClassName = 'com.google.api.graphql.examples.library.graphqlserver.GraphQlServer'
  applicationName = 'library-graphqlserver'
  outputDir = new File(project.buildDir, 'tmp')
  classpath = jar.outputs.files + project.configurations.runtime
}

task bookBackend(type: CreateStartScripts) {
  mainClassName = 'com.google.api.graphql.examples.library.bookbackend.BookServer'
  applicationName = 'book-backend'
  outputDir = new File(project.buildDir, 'tmp')
  classpath = jar.outputs.files + project.configurations.runtime
}

task shelfBackend(type: CreateStartScripts) {
  mainClassName = 'com.google.api.graphql.examples.library.shelfbackend.ShelfServer'
  applicationName = 'shelf-backend'
  outputDir = new File(project.buildDir, 'tmp')
  classpath = jar.outputs.files + project.configurations.runtime
}

// ------------------
// Streaming Examples

task streamingBackend(type: CreateStartScripts) {
  mainClassName = 'com.google.api.graphql.examples.streaming.backend.HelloWorldServer'
  applicationName = 'streaming-backend'
  outputDir = new File(project.buildDir, 'tmp')
  classpath = jar.outputs.files + project.configurations.runtime
}

task streamingGraphQlClient(type: CreateStartScripts) {
  mainClassName = 'com.google.api.graphql.examples.streaming.graphqlclient.GraphQlGrpcClient'
  applicationName = 'streaming-graphql-client'
  outputDir = new File(project.buildDir, 'tmp')
  classpath = jar.outputs.files + project.configurations.runtime
}



task streamingGraphQlServer(type: CreateStartScripts) {
  mainClassName = 'com.google.api.graphql.examples.streaming.graphqlserver.GraphQlGrpcServer'
  applicationName = 'streaming-graphql-server'
  outputDir = new File(project.buildDir, 'tmp')
  classpath = jar.outputs.files + project.configurations.runtime
}
//生成pom依赖
task writeNewPom << {
    pom {
        project {
            inceptionYear '2008'
            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
        }
    }.writeTo("$buildDir/pom.xml")
}
//mybatise Generator
task mybatisGenerate << {
    def properties = getDbProperties()
    ant.properties['targetProject'] = projectDir.path
    ant.properties['driverClass'] = properties.getProperty("jdbc.driverClassName")
    ant.properties['connectionURL'] = properties.getProperty("jdbc.url")
    ant.properties['userId'] = properties.getProperty("jdbc.user")
    ant.properties['password'] = properties.getProperty("jdbc.pass")
    ant.properties['src_main_java'] = sourceSets.main.java.srcDirs[0].path
    ant.properties['src_main_resources'] = sourceSets.main.resources.srcDirs[0].path
    ant.properties['modelPackage'] = properties.getProperty("package.model")
    ant.properties['mapperPackage'] = properties.getProperty("package.mapper")
    ant.properties['sqlMapperPackage'] =properties.getProperty("package.xml")
    ant.taskdef(
            name: 'mbgenerator',
            classname: 'org.mybatis.generator.ant.GeneratorAntTask',
            classpath: configurations.mybatisGenerator.asPath
    )
    ant.mbgenerator(overwrite: true,
            configfile: 'src/main/resources/mybatis/generatorConfig.xml', verbose: true) {
        propertyset {
            propertyref(name: 'targetProject')
            propertyref(name: 'userId')
            propertyref(name: 'driverClass')
            propertyref(name: 'connectionURL')
            propertyref(name: 'password')
            propertyref(name: 'src_main_java')
            propertyref(name: 'src_main_resources')
            propertyref(name: 'modelPackage')
            propertyref(name: 'mapperPackage')
            propertyref(name: 'sqlMapperPackage')
        }
    }
}



applicationDistribution.into('bin') {
  from(helloworldGraphqlServer)
  from(helloworldBackend)
  from(libraryGraphqlServer)
  from(bookBackend)
  from(shelfBackend)
  from(streamingBackend)
  from(streamingGraphQlClient)
  from(streamingGraphQlServer)
  fileMode = 0755
}
